#!/usr/bin/python
import sys

inputs = []
outputs = []
gates = []
FFs = []

#with open(sys.argv[1],"rU") as f:
f = open(sys.argv[1],"rU")
while True:
    line = f.readline()
    if line == "":
        break
    line = line[:-1]
    if line == "":
        continue      
    line = line.replace(","," ")
    line = line.replace(")"," ")
    line = line.replace("("," ")
    tokens = line.split()
    
    if tokens[0] == "input":
        #print tokens
        while True:
            for i in range(0,len(tokens)):
                if str(tokens[i]) != "" and str(tokens[i]) !="input":
                    inputs.append(tokens[i])
            if inputs[-1][-1] == ";":
                inputs[-1]= inputs[-1][:-1]
                break
            line = f.readline()
            line = line[:-1]
            line = line.replace(","," ")
            tokens = line.split()
            
    if tokens[0] == "output":
        #print tokens
        while True:
            for i in range(0,len(tokens)):
                if str(tokens[i]) != "" and str(tokens[i]) !="output":
                    outputs.append(tokens[i])
            if outputs[-1][-1] == ";":
                outputs[-1]= outputs[-1][:-1]
                break
            line = f.readline()
            line = line[:-1]
            line = line.replace(","," ")
            tokens = line.split()

            
    if tokens[0] == "and" or tokens[0] == "nand" \
    or tokens[0] == "or"  or tokens[0] == "nor" \
    or tokens[0] == "xor" or tokens[0] == "xnor" \
    or tokens[0] == "buf" or tokens[0] == "not":
        tokens = tokens[:-1]
        gates.append(tokens)
        
    if tokens[0] == "dff":
        tokens = tokens[:-1]
        FFs.append(tokens)
        
    for i in inputs:
        if i =="GND" or i == "VDD" or i == "CK":
            inputs.remove(i)
        
#print inputs
#print outputs
#print gates
#print FFs
 
filename = sys.argv[1].split("\\")[-1]
circuit_name = filename.split(".")[0]
 
print circuit_name
outFile = open (str(circuit_name)+"_nl.v","w")
outFile.write("// This file is generated by bench2vlog.py by littleshamoo\n")
outFile.write("//   options: -t lst \n")
outFile.write("module "+str(circuit_name)+" (CK, test_si, test_so, test_se, "+str(inputs[0]))
for i in range(1,len(inputs)):
    outFile.write(", "+str(inputs[i]))
for i in range(0,len(outputs)):
    outFile.write(", "+str(outputs[i]))    
outFile.write(");\n\n")
 
for i in range(0,len(inputs)):
    outFile.write("input "+str(inputs[i])+";\n")
    
outFile.write("input CK;\n")  
outFile.write("input test_si;\n")
outFile.write("input test_se;\n")
outFile.write("\n")
 
for i in range(0,len(outputs)):
    outFile.write("output "+str(outputs[i])+";\n")
    
outFile.write("output test_so;\n")        
outFile.write("\n")    


for gate in gates:
    if gate[0] == "not":
        outFile.write("INVX1 "+str(gate[1])+"( .A("+str(gate[3])+"), .Y("+str(gate[2])+") );\n")

    elif gate[0] == "buf":
        outFile.write("BUFX1 "+str(gate[1])+"( .A("+str(gate[3])+"), .Y("+str(gate[2])+") );\n")

    elif gate[0] == "and":
        if len(gate) == 5:
            outFile.write("AND2XL "+str(gate[1])+"( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .Y("+str(gate[2])+") );\n")
        elif len(gate) == 6:
            outFile.write("AND3XL "+str(gate[1])+"( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .C("+str(gate[5])+"), .Y("+str(gate[2])+") );\n")
        elif len(gate) == 7:
            outFile.write("AND4XL "+str(gate[1])+"( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .C("+str(gate[5])+"), .D("+str(gate[6])+"), .Y("+str(gate[2])+") );\n")
        elif len(gate) == 8:
            outFile.write("AND4XL "+str(gate[1])+"( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .C("+str(gate[5])+"), .D("+str(gate[6])+"), .Y("+str(gate[2])+"_1) );\n")
            outFile.write("AND2XL "+str(gate[1])+"_1( .A("+str(gate[2])+"_1), .B("+str(gate[7])+"), .Y("+str(gate[2])+") );\n")
        else:  
            print gate[0]+" %d" % len(gate);                 
            
    elif gate[0] == "or":
        if len(gate) == 5:
            outFile.write("OR2XL "+str(gate[1])+"( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .Y("+str(gate[2])+") );\n")
        elif len(gate) == 6:
            outFile.write("OR3XL "+str(gate[1])+"( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .C("+str(gate[5])+"), .Y("+str(gate[2])+") );\n")
        elif len(gate) == 7:
            outFile.write("OR4XL "+str(gate[1])+"( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .C("+str(gate[5])+"), .D("+str(gate[6])+"), .Y("+str(gate[2])+") );\n")
        elif len(gate) == 8:
            outFile.write("OR4XL "+str(gate[1])+"( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .C("+str(gate[5])+"), .D("+str(gate[6])+"), .Y("+str(gate[2])+"_1) );\n")
            outFile.write("OR2XL "+str(gate[1])+"_1( .A("+str(gate[2])+"_1), .B("+str(gate[7])+"), .Y("+str(gate[2])+") );\n")
        else:  
            print gate[0]+" %d" % len(gate);                 
            
    elif gate[0] == "nand":
        if len(gate) == 5:
            outFile.write("NAND2XL "+str(gate[1])+"( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .Y("+str(gate[2])+") );\n")
        elif len(gate) == 6:
            outFile.write("NAND3XL "+str(gate[1])+"( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .C("+str(gate[5])+"), .Y("+str(gate[2])+") );\n")
        elif len(gate) == 7:
            outFile.write("NAND4XL "+str(gate[1])+"( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .C("+str(gate[5])+"), .D("+str(gate[6])+"), .Y("+str(gate[2])+") );\n")
        elif len(gate) == 8:
            outFile.write("AND4XL "+str(gate[1])+"( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .C("+str(gate[5])+"), .D("+str(gate[6])+"), .Y("+str(gate[2])+"_1) );\n")
            outFile.write("NAND2XL "+str(gate[1])+"_1( .A("+str(gate[2])+"_1), .B("+str(gate[7])+"), .Y("+str(gate[2])+") );\n")
        else:  
            print gate[0]+" %d" % len(gate);                 

    elif gate[0] == "nor":
        if len(gate) == 5:
            outFile.write("NOR2XL "+str(gate[1])+"( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .Y("+str(gate[2])+") );\n")
        elif len(gate) == 6:
            outFile.write("NOR3XL "+str(gate[1])+"( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .C("+str(gate[5])+"), .Y("+str(gate[2])+") );\n")
        elif len(gate) == 7:
            outFile.write("NOR4XL "+str(gate[1])+"( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .C("+str(gate[5])+"), .D("+str(gate[6])+"), .Y("+str(gate[2])+") );\n")
        elif len(gate) == 8:
            outFile.write("OR4XL "+str(gate[1])+"( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .C("+str(gate[5])+"), .D("+str(gate[6])+"), .Y("+str(gate[2])+"_1) );\n")
            outFile.write("NOR2XL "+str(gate[1])+"_1( .A("+str(gate[2])+"_1), .B("+str(gate[7])+"), .Y("+str(gate[2])+") );\n")
        else: 
            print gate[0]+" %d" % len(gate);                 

    elif gate[0] == "xor": 
        if len(gate) == 5: 
            outFile.write("NAND2XL "+str(gate[1])+"_1( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .Y("+str(gate[2])+"_1) );\n")
            outFile.write("OR2XL "+str(gate[1])+"_2( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .Y("+str(gate[2])+"_2) );\n")
            outFile.write("AND2XL "+str(gate[1])+"( .A("+str(gate[2])+"_1), .B("+str(gate[2])+"_2), .Y("+str(gate[2])+") );\n")
        else: 
            print gate[0]+" %d" % len(gate); 

    elif gate[0] == "xnor": 
        if len(gate) == 5: 
            outFile.write("NAND2XL "+str(gate[1])+"_1( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .Y("+str(gate[2])+"_1) );\n")
            outFile.write("OR2XL "+str(gate[1])+"_2( .A("+str(gate[3])+"), .B("+str(gate[4])+"), .Y("+str(gate[2])+"_2) );\n")
            outFile.write("NAND2XL "+str(gate[1])+"( .A("+str(gate[2])+"_1), .B("+str(gate[2])+"_2), .Y("+str(gate[2])+") );\n")
        else: 
            print gate[0]+" %d" % len(gate); 

    else: 
        print gate[0]+" %d" % len(gate);                 
            
test_si = "test_si"
for FF in FFs:
    if len(FF) == 4: 
        outFile.write("SDFFXL "+str(FF[1])+"( .SI("+test_si+"), .SE(test_se), .D("+str(FF[3])+"), .CK(CK), .Q("+str(FF[2])+") );\n")
        test_si = str(FF[2])
    else: 
        outFile.write("SDFFXL "+str(FF[1])+"( .SI("+test_si+"), .SE(test_se), .D("+str(FF[4])+"), .CK(CK), .Q("+str(FF[3])+") );\n")
        test_si = str(FF[3])
    
outFile.write("\n")    
outFile.write("assign test_so = "+test_si+";\n\n")
outFile.write("endmodule\n")
    
outFile.close()

f.close(); 
            
